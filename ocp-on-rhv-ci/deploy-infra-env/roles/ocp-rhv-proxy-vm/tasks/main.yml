---

- name: provision VM with cloud init
  ovirt_vm:
    name: proxy-vm
    template: "{{template_name}}"
    cluster: "{{cluster_name}}"
    auth: "{{ovirt_auth}}"
    memory: 2GiB
    state: running
    high_availability: true
    high_availability_priority: 50
    host: "{{host_running_proxy | default(omit)}}"
    nics:
      - name: eth0
        profile_name: "{{mgmt_network}}"
        mac_address: "{{mgmt_mac_address | default(omit)}}"

    cloud_init:
      nic_boot_protocol: "{{mgmt_boot_protocol | default('dhcp')}}"
      nic_ip_address: "{{external_address | default(omit) }}"
      nic_netmask: "{{external_netmask | default(omit)}}"
      authorized_ssh_keys: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
      nic_gateway: "{{external_gateway | default(omit)}}"
      nic_name: eth0
      dns_servers: 8.8.8.8
      custom_script: |
        write_files:
         - content: |
             nameserver 8.8.8.8
           path: /etc/resolv.conf
           permissions: '0622'
      nic_on_boot: true
      host_name: "{{external_hostname | default(omit)}}"
      user_name: root
  delegate_to: localhost

- include_tasks: wait_until_reachable.yml

- debug:
    var: collected_address

- name: Add a host alias that we reach through a tunnel (Ansible 1.9 and older)
  add_host:
    hostname: '{{ external_hostname | default(omit)}}'
    name: proxy-vm
    ansible_ssh_host: '{{ collected_address }}'
    ansible_ssh_user: root

- name: Wait for system to become reachable
  wait_for_connection:

- name: install req packages
  yum:
    state: present
    name:
      - dnsmasq
      - firewalld
      - haproxy
      - mod_ssl
      - openssl
      - httpd
      - dialog
      - wget
      - tmux

- name: debug print ocp_networks
  debug: msg="{{ocp_networks}}"


- name: attach nics to the vm
  ovirt_nic:
    state: present
    auth: "{{ovirt_auth}}"
    vm: proxy-vm
    name: "{{item.nic}}"
    network: "ovn-vm{{item.name}}"
  with_items: "{{ocp_networks}}"
  delegate_to: localhost

- name: create internal nics
  copy:
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{item.nic}}"
    content: |
      BOOTPROTO=none
      DEVICE={{item.nic}}
      ONBOOT=yes
      TYPE=Ethernet
      USERCTL=no
      IPADDR={{item.address}}
      NETMASK={{item.netmask}}
      NM_CONTROLLED=no
  with_items: "{{ocp_networks}}"

- name: check if nic can be brought up using ifup
  command: "ifup {{item.nic}}"
  with_items: "{{ocp_networks}}"

- name: Change /etc/resolv.conf permission allow read to all
  file:
    path: /etc/resolv.conf
    mode: '0666'

- name: create /var/lib/dnsmasq
  file:
    path: /var/lib/dnsmasq
    state: directory

- name: create dnsmasq service file
  copy:
    dest: /usr/lib/systemd/system/dnsmasq@.service
    content: |
      [Unit]
      Description=DHCP and DNS caching server for %i.
      After=network.target

      [Service]
      ExecStart=/usr/sbin/dnsmasq -k --conf-file=/var/lib/dnsmasq/dnsmasq-%i.conf
      ExecReload=/bin/kill -HUP
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: deploy ocp DNS resolver
  block:
    - name: prepend localresolver to /etc/resolv.conf
      blockinfile:
        path: /etc/dhcp/dhclient.conf
        content: |
          interface "eth0" {
          prepend domain-name-servers {{ collected_address  }};
          }
   
    - name: Restart network
      service:
        name: network
        state: restarted     

    - gather_facts:
    - set_fact: external_dns_record="{{ ansible_facts['dns']['nameservers'][1]}}"

    - template:
        src: dnsmasq_ocp.j2
        dest: /var/lib/dnsmasq/dnsmasq-net-0.conf
    - command: /usr/sbin/dnsmasq -k --conf-file=/var/lib/dnsmasq/dnsmasq-net-0.conf --test    
      register: command_result
      failed_when: "'syntax check OK' not in command_result.stderr" 
    - name: start/enable dnsmasq service for network
      systemd:
        name: "dnsmasq@net-0.service"
        state: started
        enabled: true
    
     
  when: ocp_dns is true

- name: create dnsmasq configuration for network
  copy:
    dest: "/var/lib/dnsmasq/dnsmasq-{{item.name}}.conf"
    content: |
      strict-order
      pid-file=/var/run/{{item.name}}.pid
      except-interface=lo
      bind-dynamic
      interface={{item.nic}}
      dhcp-range={{item.dhcp_range}}
      dhcp-no-override
      dhcp-authoritative
      log-queries
      dhcp-option=3,{{item.address}}
      domain={{base_domain}}
      dhcp-leasefile=/var/lib/dnsmasq/{{item.name}}.leases
  with_items: "{{ocp_networks}}"

- name: check dnsmasq configuration syntax
  command: /usr/sbin/dnsmasq -k --conf-file=/var/lib/dnsmasq/dnsmasq-{{item.name}}.conf --test
  with_items: "{{ocp_networks}}"
  register: command_result
  failed_when: "'syntax check OK' not in command_result.stderr"

- name: start/enable dnsmasq service for network
  systemd:
    name: "dnsmasq@{{item.name}}.service"
    state: started
    enabled: true
  with_items: "{{ocp_networks}}"

- name: firewalld configuration
  block:
    - firewalld:
        masquerade: yes
        state: enabled
        permanent: yes
        zone: public

    - firewalld:
        zone: public
        service: "{{item}}"
        permanent: yes
        state: enabled
      with_items:
        - ssh
        - dhcp
        - dns
        - http
        - https
        - dhcpv6-client

    - firewalld:
        zone: public
        port: "{{item}}"
        permanent: yes
        state: enabled
      with_items:
        - 8404/tcp
        - 6443/tcp


- name: create haproxy configuration
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg

- name: Disable SELinux at next reboot
  selinux:
    state: disabled

- name: Set SELinux in permissive mode until the machine is rebooted
  command: setenforce 0
  ignore_errors: true
  changed_when: false

- name: start/enable haproxy service
  systemd:
    name: "haproxy.service"
    state: started
    enabled: true

- name: start/enable firewalld service
  systemd:
    name: "firewalld.service"
    state: restarted
    enabled: true
